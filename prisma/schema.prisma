generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String      @id @default(uuid())
  username  String      @unique(map: "User_username_key")
  password  String
  fullName  String
  status    Status      @default(Activated)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  user_role user_role[]
}

enum Status {
  Activated
  Deactivated
}

model role {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique(map: "Role_name_key")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  user_role             user_role[]
  role_access_privilege role_access_privilege[]
}

model menu_main {
  id         Int          @id @default(autoincrement())
  name       String       @unique(map: "Menu_name_key")
  childMenus menu_child[]
}

model menu_child {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "SubMenu_name_key")
  description      String
  link             String
  menuMainId       Int
  menuMain         menu_main          @relation(fields: [menuMainId], references: [id])
  access_privilege access_privilege[]
}

model user_role {
  id     Int    @id @default(autoincrement())
  userId String
  roleId Int
  role   role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model access_privilege {
  id                    Int                     @id @default(autoincrement())
  description           String
  menuChildId           Int
  menu_child            menu_child              @relation(fields: [menuChildId], references: [id])
  role_access_privilege role_access_privilege[]
}

model role_access_privilege {
  id                Int              @id @default(autoincrement())
  roleId            Int
  role              role             @relation(fields: [roleId], references: [id], onDelete: Cascade)
  accessPrivilegeId Int
  access_privilege  access_privilege @relation(fields: [accessPrivilegeId], references: [id])
}
